set encoding=utf-8
scriptencoding utf-8

" Set default 'runtimepath' without ~/.vim folders
let &runtimepath=printf('%s/vimfiles,%s,%s/vimfiles/after', $VIM, $VIMRUNTIME, $VIM)
" What is the name of the directory containing this file?
let s:portable=expand('<sfile>:p:h')
" Add the directory to 'runtimepath'
let &runtimepath=printf('%s,%s,%s/after', s:portable, &runtimepath, s:portable)
let &packpath=&runtimepath

" Use sensible XDG path
set viminfo='1000,n$XDG_CACHE_HOME/vim/info
set directory=$XDG_CACHE_HOME/vim/swap//
set undodir=$XDG_CACHE_HOME/vim/undo//
set backupdir=$XDG_CACHE_HOME/vim/backup//

" Enable backups and undo
set backup
set undofile

set shiftround " round indent to multiple shiftwidth
set showmatch " show matching brackets when text indicator is over them
set hlsearch " highlight search results
set ignorecase " ignore case when searching
set smartcase " when searching try to be smart about cases
set nowrap " don't wrap lines
set ttyfast " indicate fast tty connetion
set lazyredraw " helps dealing with flickering
set clipboard=unnamed,unnamedplus " merge clipboard with x11 and mac
set list listchars=tab:>-,trail:·,extends:►,precedes:◄ " indicate various special chars
set number " show line numbers ...
set relativenumber " and use relative style numbers
set cursorline " highlight line with cursor
set showcmd " show partial commands in bottom left corner
set shortmess+=c "Shut off completion messages
set whichwrap+=<,>,h,l,[,] " autowrap to next line for cursor movements
set splitbelow " when splitting windows put new ones below ...
set splitright " ...and to the right
set path+=** " search subfolders recursively
set fillchars=diff:\ , " set <space> as fill character for diffs on string removal (default is <minus> char)

" command line completion
set wildmenu
set wildmode=longest:full,full

" Scrolling
set scrolloff=8 " start scrolling when we're 8 lines away from margins
set sidescroll=1 " enable sidescrolling too
set sidescrolloff=8 " start sidescrolling 8 chars away from margins

" Tabs, make them 4 spaces by default
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

set rtp+=/usr/local/opt/fzf

" Airline
" force solarized theme
let g:airline_theme='solarized'
" don't show expected encoding
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
" remove separator symbols
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_left_alt_sep=''
let g:airline_right_alt_sep=''
" use plain ascii symbols, unicode symbols don't look nice with every font
let g:airline_symbols_ascii=1

" Ansible
let g:ansible_unindent_after_newline = 1
let g:ansible_name_highlight = 'd'
let g:ansible_extra_keywords_highlight = 1
let g:ansible_template_syntaxes = { '*.y*ml.j2': 'yaml' }

" Asycomplete
augroup asyncomple_vimrc
    autocmd!

    " register necovim source
    autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
        \ 'name': 'necovim',
        \ 'allowlist': ['vim'],
        \ 'completor': function('asyncomplete#sources#necovim#completor'),
        \ }))

    autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
        \ 'name': 'buffer',
        \ 'allowlist': ['*'],
        \ 'completor': function('asyncomplete#sources#buffer#completor'),
        \ 'config': {
        \    'max_buffer_size': 5000000,
        \    'clear_cache': 1,
        \    'min_word_len': 3,
        \  },
        \ }))

    " close complete popup when completion is done
    autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
augroup END

" show errors and warnings from lsp in statusline
let g:lsp_diagnostics_echo_cursor = 1

" enable references highlight
let g:lsp_highlight_references_enabled = 1

" enable symantic highlighting
let g:lsp_semantic_enabled = 1

" Comment Banners
CommentBannerMapping g1 :CommentBanner --pattern =,1-,=  --width 60  --comment false

" Source local configuration
runtime vimrc.local
